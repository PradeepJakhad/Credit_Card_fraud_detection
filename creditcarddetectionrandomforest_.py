# -*- coding: utf-8 -*-
"""CreditCardDetectionRandomForest .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/112J6u4PACzFsQBfTmgbnpKSZQzxCm7zo
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import gridspec

df = pd.read_csv("/content/drive/MyDrive/creditcard.csv")

df.head()

print(df.shape)
print(df.describe())

print(df.isnull().sum)

fraud =df[df['Class']==1]
valid=df[df['Class']==0]
outlierfraction=len(fraud)/float(len(valid))
print(outlierfraction)
print('frauddetection:{}'.format(len(df[df['Class']==1])))
print('validtransaction:{}'.format(len(df[df['Class']==0])))

print('Amount description')
fraud.Amount.describe()

print('valid transacation desccription')
valid.Amount.describe()

datacorr=df.corr()
plt.figure(figsize=(14,9))
sns.heatmap(datacorr,square=True)
plt.show()

sns.boxplot(df['Amount'],palette='rainbow')
plt.show()

X=df.drop('Class',axis=1)
y=df['Class']
print(X.shape)
print(y.shape)

xvalues=X.values
yvalues=y.values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(xvalues,yvalues,test_size=0.2,random_state=42)

from sklearn.ensemble import RandomForestClassifier
rfc=RandomForestClassifier()
rfc.fit(x_train,y_train)

y_pred=rfc.predict(x_test)

from sklearn.metrics import accuracy_score,confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import precision_score, recall_score
from sklearn.metrics import f1_score, matthews_corrcoef

n_outlier=len(fraud)
n_errors=(y_pred!=y_test).sum()
print("no of outlier:{}".format(n_outlier))
print("no of errors:{}".format(n_errors))

print('random forest classifier is used')

acc=accuracy_score(y_test,y_pred)
print('accuracy score:{}'.format(acc))

prec =precision_score(y_test,y_pred)
print("The precision is {}".format(prec))

rec = recall_score(y_test,y_pred)
print("The recall is {}".format(rec))

f1 = f1_score(y_test, y_pred)
print("The F1-Score is {}".format(f1))

MCC = matthews_corrcoef(y_test, y_pred)
print("The Matthews correlation coefficient is{}".format(MCC))

Labels=['normal','fraud']
confumat=confusion_matrix(y_pred,y_test)
plt.figure(figsize=(12,12))
sns.heatmap(confumat,xticklabels=Labels,yticklabels=Labels,annot=True,fmt="d")
plt.title('confusion matrix')
plt.ylabel('true class')
plt.xlabel('predicted class')
plt.show()